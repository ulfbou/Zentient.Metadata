# CI/CD for Zentient Monorepo - production-grade
# Builds, tests, packs, and publishes .NET libraries and analyzers.
# - Multi-target builds for class libraries: net8.0, net9.0
# - Analyzers target: netstandard2.0
# - Tests run per-matrix framework
# - Pack & publish on semantic tag pushes
# Rationale comments accompany each job/step for maintainability and auditing.

name: CI/CD

on:
  push:
    branches: [ develop ]
    tags: [ 'v*.*.*' ] # Release publishing only for semantic tags like v1.2.3
  pull_request:
    branches: [ main ]

env:
  SOLUTION: Zentient.Metadata.sln
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true

concurrency:
  # Ensure a single CI run per branch/ref to avoid duplicated work
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Unified CI job: restore, build, test (matrix over SDK versions)
  ci:
    name: Build & Test (${{ matrix.dotnet-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '8.0.x', '9.0.x' ]
    timeout-minutes: 40
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK (matrix)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Ensure .NET 9.0.100 installed (satisfy global.json)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.100

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ matrix.dotnet-version }}-${{ hashFiles('**/*.csproj', '**/Directory.Pack.props', '**/Directory.Build.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION }}

      - name: Quick packability validation (non-fatal)
        run: |
          set -euo pipefail
          echo "Checking IsPackable flags (warnings only)"
          missing=0
          for proj in $(git ls-files 'src/**/*.csproj' 'src/*.csproj'); do
            if ! grep -q '<IsPackable>true</IsPackable>' "$proj"; then
              echo "WARNING: $proj missing explicit <IsPackable>true</IsPackable>"
              missing=1
            fi
          done
          for tproj in $(git ls-files 'tests/**/*.csproj' 'tests/*.csproj'); do
            if ! grep -q '<IsPackable>false</IsPackable>' "$tproj"; then
              echo "WARNING: test project $tproj missing explicit <IsPackable>false</IsPackable>"
              missing=1
            fi
          done
          if [ $missing -eq 1 ]; then
            echo "Packability check produced warnings; see repo policy. This does not block CI."
          fi

      - name: Build solution
        run: dotnet build ${{ env.SOLUTION }} --configuration Release --no-restore

      - name: Run tests
        run: dotnet test ${{ env.SOLUTION }} --configuration Release --no-build --logger trx --results-directory tests/TestResults || (echo "Tests failed" && exit 1)

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.dotnet-version }}
          path: tests/TestResults/

  # Pack job: create NuGet packages (runs once after CI)
  pack:
    name: Pack NuGet Packages
    needs: ci
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK (use 9.0.100 for packing)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.100

      - name: Restore
        run: dotnet restore ${{ env.SOLUTION }}

      - name: Determine package version
        id: pkgver
        run: |
          set -euo pipefail
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Strip v prefix if present: refs/tags/v1.2.3 -> 1.2.3
            tag=${GITHUB_REF#refs/tags/}
            ver=${tag#v}
            echo "version=$ver" >> $GITHUB_OUTPUT
          else
            # Try to derive a base semantic version from any VersionPrefix in the repo
            base=$(git grep -m1 "<VersionPrefix>" || true)
            if [ -n "$base" ]; then
              # extract using sed: <VersionPrefix>1.2.3</VersionPrefix>
              base=$(git grep -m1 "<VersionPrefix>" | sed -E 's/.*<VersionPrefix>([^<]+)<\/VersionPrefix>.*/\1/')
            else
              base="0.0.0"
            fi
            shortsha=$(git rev-parse --short=8 HEAD)
            date=$(date -u +%Y%m%d%H%M)
            ver="${base}-ci.${date}.${shortsha}"
            echo "version=$ver" >> $GITHUB_OUTPUT
          fi

      - name: Create artifacts dir
        run: mkdir -p artifacts

      - name: Pack solution (include symbols and sources)
        run: |
          set -euo pipefail
          echo "Packing with PackageVersion=${{ steps.pkgver.outputs.version }}"
          dotnet pack ${{ env.SOLUTION }} -c Release --no-build -p:PackageVersion=${{ steps.pkgver.outputs.version }} --include-symbols --include-source -o artifacts || { echo "Pack failed"; exit 1; }

      - name: Upload NuGet packages as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: artifacts/

  # Optional: sign symbol packages if signing key available (placeholder)
  sign-symbols:
    name: Sign symbol packages (optional)
    needs: pack
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts

      - name: Sign symbols (conditional inside script)
        run: |
          set -euo pipefail
          # secrets.SIGNING_KEY is available in runs but should not be used in expressions.
          if [ -z "${{ secrets.SIGNING_KEY }}" ]; then
            echo "No SIGNING_KEY configured; skipping signing steps.";
            exit 0;
          fi
          echo "Signing symbols (placeholder)"
          SIGNING_KEY="${{ secrets.SIGNING_KEY }}"
          # Implement actual signing commands here, using $SIGNING_KEY securely.

  # Publish job: push packages to NuGet.org and create GitHub release
  publish:
    name: Publish to NuGet & Create Release
    needs: [ pack, sign-symbols ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 20
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.100

      - name: Push packages to NuGet.org (packages and symbols)
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          set -euo pipefail
          pushed=0
          for pkg in artifacts/*.nupkg; do
            if [ -f "$pkg" ]; then
              dotnet nuget push "$pkg" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate || { echo "Failed to push $pkg"; exit 1; }
              pushed=$((pushed+1))
            fi
          done
          for sym in artifacts/*.snupkg; do
            if [ -f "$sym" ]; then
              dotnet nuget push "$sym" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate || { echo "Failed to push symbol $sym"; exit 1; }
            fi
          done
          if [ "$pushed" -eq 0 ]; then
            echo "No packages found to push."; exit 1
          fi

      - name: Create GitHub Release and attach artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*.nupkg
            artifacts/*.snupkg
            CHANGELOG.md
            LICENSE
            src/**/README.md
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# End of workflow
# Notes:
# - Consolidated CI reduces redundant setup and warms the NuGet cache per-matrix.
# - Solution-level pack will only produce packages for projects with IsPackable=true.
# - Optional signing and internal feed pushes are gated by secrets (checked at runtime in steps).
