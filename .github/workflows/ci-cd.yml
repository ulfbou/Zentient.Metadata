name: Unified CI/CD

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
  MAIN_PROJECT: src/Zentient.Metadata/Zentient.Metadata.csproj
  ABSTRACTIONS_PROJECT: src/Zentient.Metadata.Abstractions/Zentient.Metadata.Abstractions.csproj
  ATTRIBUTES_PROJECT: src/Zentient.Metadata.Attributes/Zentient.Metadata.Attributes.csproj
  METADATA_PROJECT: src/Zentient.Metadata/Zentient.Metadata.csproj
  TEST_PROJECT: tests/Zentient.Metadata.Tests.csproj

jobs:
  build-base-image:
    name: Build Base Image
    runs-on: ubuntu-latest
    outputs:
      repo_lc: ${{ steps.lowercase-repo.outputs.repo_lc }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set lowercase repo name
        id: lowercase-repo
        run: echo "repo_lc=${GITHUB_REPOSITORY,,}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ steps.lowercase-repo.outputs.repo_lc }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  run-ci-checks:
    name: Run CI Checks
    runs-on: ubuntu-latest
    needs: build-base-image
    container: ghcr.io/${{ needs.build-base-image.outputs.repo_lc }}:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug List files in workspace
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing all files recursively:"
          find .

      - name: Build Zentient.Metadata.Abstractions
        run: dotnet build ${{ env.ABSTRACTIONS_PROJECT }} --configuration Release -v normal

      - name: Build Zentient.Metadata.Attributes
        run: dotnet build ${{ env.ATTRIBUTES_PROJECT }} --configuration Release -v normal

      - name: Build Zentient.Metadata
        run: dotnet build ${{ env.METADATA_PROJECT }} --configuration Release -v normal

      - name: Ensure TestResults directory exists
        run: mkdir -p TestResults

      - name: Run Tests
        run: |
          dotnet test ${{ env.TEST_PROJECT }} --no-build --configuration Release --logger trx --results-directory ./TestResults/

      - name: Debug List test results
        run: |
          if [ -d ./TestResults ]; then ls -l ./TestResults; else echo "TestResults directory does not exist"; fi

      - name: Run Code Analysis
        run: dotnet build ${{ env.MAIN_PROJECT }} --configuration Release -p:RunCodeAnalysis=true -v normal

      - name: Run Security Scan
        run: dotnet build ${{ env.MAIN_PROJECT }} --configuration Release -p:RunSecurityCodeAnalysis=true -v normal

      - name: Run Format Check
        run: dotnet format --verify-no-changes --verbosity diagnostic

      - name: Run Vulnerability Scan
        run: dotnet list package --vulnerable --include-transitive

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults/

  package-and-publish:
    name: Package and Publish
    runs-on: ubuntu-latest
    needs: run-ci-checks
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    container: ghcr.io/${{ needs.build-base-image.outputs.repo_lc }}:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore dependencies
        run: dotnet restore ${{ env.MAIN_PROJECT }} -v normal
      
      - name: Create package
        run: dotnet pack ${{ env.MAIN_PROJECT }} --configuration Release -o artifacts/

      - name: Publish to NuGet
        run: dotnet nuget push "artifacts/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
