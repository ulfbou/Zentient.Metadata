name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags:
      - 'Zentient.Metadata-v*'
      - 'Zentient.Metadata.Abstractions-v*'
      - 'Zentient.Metadata.Attributes-v*'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        configuration: [Debug, Release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Restore dependencies
        run: dotnet restore
      - name: Build solution
        run: dotnet build --configuration ${{ matrix.configuration }} --no-restore -v diag
      - name: Run tests
        run: >
          dotnet test
          --configuration ${{ matrix.configuration }}
          --no-build
          --verbosity diag
          --logger trx
          --logger "console;verbosity=detailed"
          --collect:"XPlat Code Coverage"
          --results-directory ./TestResults/
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.configuration }}
          path: TestResults/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.configuration == 'Release'
        with:
          file: TestResults/*/coverage.cobertura.xml
          flags: unittests
          name: codecov-umbrella

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Restore dependencies
        run: dotnet restore
      - name: Run code analysis
        run: dotnet build --configuration Release -p:RunCodeAnalysis=true -v diag
      - name: Run security scan
        run: dotnet build --configuration Release -p:RunSecurityCodeAnalysis=true -v diag
      - name: Format check
        run: dotnet format --verify-no-changes --verbosity diagnostic

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Restore dependencies
        run: dotnet restore -v diag
      - name: Run vulnerability scan
        run: dotnet list package --vulnerable --include-transitive
      - name: Run dependency audit
        run: >
          dotnet restore --verbosity normal 2>&1 | grep -i "vulnerability\|security" || true

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Restore dependencies
        run: dotnet restore -v diag
      - name: Run benchmarks
        run: dotnet build --configuration Release -p:PerformanceBenchmarkingEnabled=true -v diag
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: "**/BenchmarkDotNet.Artifacts/**/*"

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Setup Node.js (for DocFX)
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install DocFX
        run: dotnet tool install --global docfx
      - name: Restore dependencies
        run: dotnet restore -v diag
      - name: Generate documentation
        run: dotnet build --configuration Release -p:GenerateDocumentation=true -v diag
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site

  pack-and-publish:
    name: Pack and Publish Packages
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security]
    strategy:
      matrix:
        package:
          - src/Zentient.Metadata/Zentient.Metadata.csproj
          - src/Zentient.Metadata.Abstractions/Zentient.Metadata.Abstractions.csproj
          - src/Zentient.Metadata.Attributes/Zentient.Metadata.Attributes.csproj
          # - src/Zentient.Metadata.Analyzers/Zentient.Metadata.Analyzers.csproj
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Restore dependencies
        run: dotnet restore ${{ matrix.package }}
      - name: Build package
        run: dotnet build ${{ matrix.package }} --configuration Release --no-restore
      - name: Pack package
        run: dotnet pack ${{ matrix.package }} --configuration Release --no-build -v diag
      - name: Find nupkg path
        id: find_nupkg
        run: |
          echo "::group::Find nupkg"
          find . -type f -name "*.nupkg" | grep -v ".snupkg" > nupkg_paths.txt
          cat nupkg_paths.txt
          echo "::endgroup::"
          echo "nupkg_path=$(head -n 1 nupkg_paths.txt)" >> $GITHUB_OUTPUT
      - name: Find snupkg path
        id: find_snupkg
        run: |
          echo "::group::Find snupkg"
          find . -type f -name "*.snupkg" > snupkg_paths.txt
          cat snupkg_paths.txt
          echo "::endgroup::"
          echo "snupkg_path=$(head -n 1 snupkg_paths.txt)" >> $GITHUB_OUTPUT
      - name: Publish to NuGet
        if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/Zentient.Metadata-v') || startsWith(github.ref, 'refs/tags/Zentient.Metadata.Abstractions-v') || startsWith(github.ref, 'refs/tags/Zentient.Metadata.Attributes-v'))
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          if [ -f ${{ steps.find_nupkg.outputs.nupkg_path }} ]; then
            echo "Publishing ${{ steps.find_nupkg.outputs.nupkg_path }}"
            dotnet nuget push "${{ steps.find_nupkg.outputs.nupkg_path }}" \
              --api-key "$NUGET_API_KEY" \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          else
            echo "No .nupkg found to publish."
          fi
      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages-${{ matrix.package }}
          path: ${{ steps.find_nupkg.outputs.nupkg_path }}
        if: ${{ !contains(matrix.package, '/') }}
      - name: Upload package artifacts (safe)
        if: ${{ contains(matrix.package, '/') }}
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages-${{ matrix.package }}
            | replace('/', '-') | replace('\\', '-')
          path: ${{ steps.find_nupkg.outputs.nupkg_path }}
      - name: Upload symbol packages
        uses: actions/upload-artifact@v4
        with:
          name: symbol-packages-${{ matrix.package }}
          path: ${{ steps.find_snupkg.outputs.snupkg_path }}
        if: ${{ !contains(matrix.package, '/') }}
      - name: Upload symbol packages (safe)
        if: ${{ contains(matrix.package, '/') }}
        uses: actions/upload-artifact@v4
        with:
          name: symbol-packages-${{ matrix.package }}
            | replace('/', '-') | replace('\\', '-')
          path: ${{ steps.find_snupkg.outputs.snupkg_path }}

  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    if: always()
    needs:
      - build-and-test
      - code-quality
      - security
      - benchmarks
      - documentation
      - pack-and-publish
    steps:
      - name: Delete old artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            test-results-Debug
            benchmark-results
          failOnError: false
