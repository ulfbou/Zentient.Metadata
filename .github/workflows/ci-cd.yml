---
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.dotnet-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dotnet-version: ['8.0.x', '9.0.x']
        configuration: [Debug, Release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-${{ matrix.dotnet-version }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.dotnet-version }}-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration ${{ matrix.configuration }} --no-restore

      - name: Run tests and generate code coverage
        run: |
          dotnet test --no-build \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=cobertura \
          /p:CoverletOutput=./TestResults/ \
          --logger "trx;LogFileName=testresults.trx" \
          --configuration ${{ matrix.configuration }}
        if: matrix.configuration == 'Release'

      - name: Run tests (Debug)
        run: >
          dotnet test \
          --configuration Debug \
          --no-build \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=cobertura \
          /p:CoverletOutput=./TestResults/ \
          --logger "trx;LogFileName=testresults.trx"
        if: matrix.configuration == 'Debug'

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.dotnet-version }}-${{ matrix.configuration }}
          path: TestResults/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.configuration == 'Release'
        with:
          file: TestResults/*/coverage.cobertura.xml
          flags: ${{ matrix.dotnet-version }}
          fail_ci_if_error: true

  code-quality:
    name: Code Quality Analysis (${{ matrix.dotnet-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dotnet-version: ['8.0.x', '9.0.x']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-${{ matrix.dotnet-version }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.dotnet-version }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Run code analysis
        run: dotnet build --configuration Release -p:RunCodeAnalysis=true

      - name: Run security scan
        run: dotnet build --configuration Release -p:RunSecurityCodeAnalysis=true

      - name: Format check
        run: dotnet format --verify-no-changes --verbosity diagnostic

  security:
    name: Security Analysis (${{ matrix.dotnet-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dotnet-version: ['8.0.x', '9.0.x']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Run vulnerability scan
        run: dotnet list package --vulnerable --include-transitive --format json

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
            
      - name: Restore dependencies
        run: dotnet restore

      - name: Run benchmarks
        run: dotnet build --configuration Release -p:PerformanceBenchmarkingEnabled=true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: "**/BenchmarkDotNet.Artifacts/**/*"

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Node.js (for DocFX)
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install DocFX
        run: |
          dotnet new tool-manifest
          dotnet tool install Docfx

      - name: Restore dependencies
        run: dotnet restore

      - name: Generate documentation
        run: dotnet docfx build -o _site

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./_site

  package:
    name: Create Package
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security]
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Generate version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            VERSION="1.0.0-dev.$GITHUB_RUN_NUMBER"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Create package
        run: >
          dotnet pack
          --configuration Release
          --no-restore
          -p:PackageVersion=${{ steps.version.outputs.version }}
          -p:IncludeSymbols=true
          -p:SymbolPackageFormat=snupkg
          --output ./artifacts/

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: artifacts/*.nupkg
          
      - name: Upload symbol packages
        uses: actions/upload-artifact@v4
        with:
          name: symbol-packages
          path: artifacts/*.snupkg

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [package]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts/

      - name: Download symbol packages
        uses: actions/download-artifact@v4
        with:
          name: symbol-packages
          path: ./artifacts/

      - name: Extract release notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          CHANGELOG_FILE="CHANGELOG.md"
          OUTPUT_FILE="release-notes-${VERSION}.md"

          # Use awk for robust extraction to a temporary file
          awk '/^## \['${VERSION}'\]/{flag=1;next}/^## \[/{flag=0}flag' "$CHANGELOG_FILE" > "$OUTPUT_FILE.tmp"
          
          # Clean up the temporary file (remove leading/trailing spaces and empty lines)
          sed -i -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' "$OUTPUT_FILE.tmp"
          sed -i '/^$/d' "$OUTPUT_FILE.tmp"

          if [ ! -s "$OUTPUT_FILE.tmp" ]; then
              echo "No release notes found for version $VERSION. Using fallback message."
              echo "No release notes available for this version." > "$OUTPUT_FILE"
              echo "body_path=$OUTPUT_FILE" >> $GITHUB_OUTPUT
          else
              mv "$OUTPUT_FILE.tmp" "$OUTPUT_FILE"
              echo "body_path=$OUTPUT_FILE" >> $GITHUB_OUTPUT
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.release_notes.outputs.version }}
          body_path: ${{ steps.release_notes.outputs.body_path }}
          files: |
            artifacts/*.nupkg
            artifacts/*.snupkg
          draft: false
          prerelease: false

  publish:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts/
      
      - name: Download symbol packages
        uses: actions/download-artifact@v4
        with:
          name: symbol-packages
          path: ./artifacts/
  
      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          if [ -z "$NUGET_API_KEY" ]; then
            echo "NUGET_API_KEY is not set. Skipping publish."
            exit 0
          fi
          for nupkg in ./artifacts/*.nupkg; do
            echo "Publishing $nupkg"
            dotnet nuget push "$nupkg" \
              --api-key "$NUGET_API_KEY" \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          done
          for snupkg in ./artifacts/*.snupkg; do
            echo "Publishing $snupkg"
            dotnet nuget push "$snupkg" \
              --api-key "$NUGET_API_KEY" \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          done

  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    if: always()
    needs:
      - build-and-test
      - code-quality
      - security
      - benchmarks
    steps:
      - name: Delete old artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            test-results-*
            benchmark-results
          failOnError: false
