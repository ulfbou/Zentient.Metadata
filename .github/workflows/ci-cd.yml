name: Unified CI/CD

on:
  push:
    branches: [develop]
    tags: [ 'v*' ]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  cancel-previous-runs:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

  debug-system-info:
    name: Debug System Info
    runs-on: ubuntu-latest
    needs: cancel-previous-runs
    steps:
      - name: Print system info
        run: |
          echo "==== UNAME ===="
          uname -a
          echo "==== LSB RELEASE ===="
          lsb_release -a || cat /etc/os-release || false
          echo "==== DOTNET INFO ===="
          dotnet --info || false
          echo "==== ENVIRONMENT ===="
          env

  build-base-image:
    name: Build Base Image
    runs-on: ubuntu-latest
    needs: debug-system-info
    outputs:
      repo_lc: ${{ steps.lowercase-repo.outputs.repo_lc }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set lowercase repo name
        id: lowercase-repo
        run: echo "repo_lc=${GITHUB_REPOSITORY,,}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ steps.lowercase-repo.outputs.repo_lc }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  run-ci-checks:
    name: Run CI Checks
    runs-on: ubuntu-latest
    needs: build-base-image
    container: ghcr.io/${{ needs.build-base-image.outputs.repo_lc }}:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Build all projects
        run: dotnet build --configuration Release -v normal

      - name: Ensure TestResults directory exists
        run: mkdir -p TestResults/net8.0 TestResults/net9.0

      - name: Run all tests (multi-target)
        run: |
          for proj in $(find . -name "*.Tests.csproj"); do
            for tfm in net8.0 net9.0; do
              dotnet test "$proj" \
                --no-build \
                --configuration Release \
                --framework $tfm \
                --logger trx \
                --logger "console;verbosity=diagnostic" \
                --results-directory ./TestResults/$tfm/ > ./TestResults/$tfm/test.log 2>&1 || true
            done
          done

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults/

      - name: Run code analysis
        run: dotnet build --configuration Release -p:RunCodeAnalysis=true -v normal

      - name: Run security scan
        run: dotnet build --configuration Release -p:RunSecurityCodeAnalysis=true -v normal

      - name: Run format check
        run: dotnet format --verify-no-changes --verbosity diagnostic

      - name: Run vulnerability scan
        run: dotnet list package --vulnerable --include-transitive

  package-and-publish:
    name: Package and Publish
    runs-on: ubuntu-latest
    needs: run-ci-checks
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print .NET info
        run: dotnet --info

      - name: Show project dir & csproj head
        run: |
          echo "PWD: $(pwd)"
          ls -la src || true
          echo "---- Zentient.Metadata.csproj ----"
          sed -n '1,200p' src/Zentient.Metadata/Zentient.Metadata.csproj || true
          echo "---- Zentient.Metadata.Analyzers.csproj ----"
          sed -n '1,200p' src/Zentient.Metadata.Analyzers/Zentient.Metadata.Analyzers.csproj || true

      - name: Check IsPackable flags
        run: |
          grep -R "<IsPackable" -n src || echo "No IsPackable flags found"

      - name: Clean artifacts folder
        run: rm -rf artifacts/* || true

      - name: Ensure artifacts dir
        run: mkdir -p artifacts

      - name: Restore (diagnostic)
        run: dotnet restore -v minimal

      - name: Build solution (Release)
        run: dotnet build --configuration Release -v minimal

      - name: Pack main project (diagnostic)
        run: |
          dotnet pack src/Zentient.Metadata/Zentient.Metadata.csproj \
            --configuration Release \
            --output artifacts \
            --include-symbols --include-source -v diag || true

      - name: Pack analyzer project (diagnostic)
        run: |
          dotnet pack src/Zentient.Metadata.Analyzers/Zentient.Metadata.Analyzers.csproj \
            --configuration Release \
            --output artifacts \
            --include-symbols --include-source -v diag || true

      - name: Show artifacts directory
        run: |
          echo "Artifact dir: $(pwd)/artifacts"
          ls -la artifacts || true
          find artifacts -maxdepth 2 -type f -print -ls || true

      - name: Upload NuGet packages as artifacts (if any)
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: artifacts/

      - name: Publish any packages to NuGet (safe loop)
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          shopt -s nullglob
          pushed=0
          for f in artifacts/*.nupkg artifacts/*.snupkg; do
            [ -e "$f" ] || continue
            echo "Pushing $f"
            dotnet nuget push "$f" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
            pushed=1
          done
          if [ "$pushed" -eq 0 ]; then
            echo "No packages found to push."
          fi

      - name: Create GitHub Release (attach artifacts if present)
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*.nupkg
            artifacts/*.snupkg
            CHANGELOG.md
            src/Zentient.Metadata/README.md
            src/Zentient.Metadata.Analyzers/README.md
            src/Zentient.Metadata.Abstractions/README.md
            src/Zentient.Metadata.Attributes/README.md
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
