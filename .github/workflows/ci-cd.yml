# CI/CD for Zentient Monorepo
# This workflow builds, tests, packs, and publishes all .NET libraries and analyzers in the monorepo.
# Process documentation files (Mistakes.md, Goals.md, Decisions.md) are no longer referenced or handled by this workflow.

name: CI/CD

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  NUGET_PACKAGES: ~/.nuget/packages

jobs:
  restore:
    name: Restore NuGet Packages
    runs-on: ubuntu-latest
    concurrency:
      group: restore-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: dotnet restore
        run: dotnet restore

  build:
    name: Build Projects (Matrix)
    needs: restore
    runs-on: ubuntu-latest
    strategy:
      matrix:
        framework: [net8.0, net9.0]
    concurrency:
      group: build-${{ matrix.framework }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET ${{ matrix.framework }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.framework }}
      - name: dotnet build (src/)
        run: |
          for proj in src/*.csproj src/**/*.csproj; do
            if grep -q '<IsPackable>true</IsPackable>' "$proj"; then
              dotnet build "$proj" -c Release -f ${{ matrix.framework }} --no-restore || echo "$proj not built for ${{ matrix.framework }}"
            fi
          done

  build-analyzers:
    name: Build Analyzer Projects
    needs: restore
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET 8.0.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: dotnet build (analyzers)
        run: |
          for proj in src/*.Analyzers.csproj src/**/*.Analyzers.csproj; do
            dotnet build "$proj" -c Release --no-restore
          done

  test:
    name: Test Projects
    needs: [build, build-analyzers]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        framework: [net8.0, net9.0]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET ${{ matrix.framework }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.framework }}
      - name: dotnet test (tests/)
        run: |
          for proj in tests/*.csproj tests/**/*.csproj; do
            dotnet test "$proj" -c Release -f ${{ matrix.framework }} --no-build --logger trx || echo "$proj not tested for ${{ matrix.framework }}"
          done
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.framework }}
          path: tests/TestResults/

  pack:
    name: Pack NuGet Packages
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET 9.0.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: dotnet pack (src/)
        run: |
          mkdir -p artifacts
          for proj in src/*.csproj src/**/*.csproj; do
            if grep -q '<IsPackable>true</IsPackable>' "$proj"; then
              dotnet pack "$proj" -c Release --no-build --include-symbols --include-source -o artifacts
            fi
          done
      - name: Upload NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: artifacts/*.nupkg

  publish:
    name: Publish to NuGet
    needs: pack
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download NuGet packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts
      - name: Setup .NET 9.0.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: dotnet nuget push
        run: |
          for pkg in artifacts/*.nupkg; do
            dotnet nuget push "$pkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate || echo "Failed to push $pkg"
          done
